串行化
---------------
	1.Serializable
		java串行化
		将对象转换成某种格式的byte[]。
		java.io.Serializable
		java.io.ObjectInputStream
		java.io.ObjectOuputStream


	2.writable
		hadoop串行化.
		不能跨语言，缺少语言便携性。

	3.json | xml


avro
----------------
	apache提供的数据串行化系统。跟语言无关。
	跨语言。
	hadoop首选串行工具。
	avro是基于schema系统,该schema是使用json描述数据结构。
	avro串行化的数据格式紧凑，能够在其他应用反串行。
	支持语句有Java, C, C++, C#, Python, and Ruby

	1.avro特点
		跨语言
		可压缩可切割
		数据结构丰富
		json定义schema
		自描述语言: schema是附加在data中同时传输的。

	2.avro使用
		a)下载avro
			apache-avro-1.8.0.tar.tz
			tar开

		b)创建avro项目，引入avro依赖
			<?xml version="1.0" encoding="UTF-8"?>
			<project xmlns="http://maven.apache.org/POM/4.0.0"
					 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
					 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
				<modelVersion>4.0.0</modelVersion>

				<groupId>com.it18zhang</groupId>
				<artifactId>my-avro</artifactId>
				<version>1.0-SNAPSHOT</version>

				<dependencies>
					<dependency>
						<groupId>org.apache.avro</groupId>
						<artifactId>avro</artifactId>
						<version>1.8.1</version>
					</dependency>
					<dependency>
						<groupId>junit</groupId>
						<artifactId>junit</artifactId>
						<version>4.11</version>
					</dependency>
				</dependencies>
			</project>

		c)编写schema文件
			[d:/mr/avro/emp.avsc]
			{
				"namespace": "tutorialspoint.com",
				"type": "record",
				"name": "Emp",
				"fields": [
					{"name": "name", "type": "string"},
					{"name": "id", "type": "int"},
					{"name": "salary", "type": "int"},
					{"name": "age", "type": "int"},
					{"name": "address", "type": "string"}
				]
			}			
		d)编译schema，生成java源代码
			//1.复制avro-tools-1.8.0.jar文件到d:/mr/avro
			//2.编译
				$cmd>java -jar avro-tools-1.8.0.jar compile schema emp.avsc .

		e)导入生成源代码
			复制tutorialspoint目录到java下。
			删除override红线。

		f)使用源代码
			package com.it18zhang.avro;

			import org.apache.avro.Schema;
			import org.apache.avro.file.DataFileReader;
			import org.apache.avro.file.DataFileWriter;
			import org.apache.avro.generic.GenericData;
			import org.apache.avro.generic.GenericDatumReader;
			import org.apache.avro.generic.GenericRecord;
			import org.apache.avro.io.DatumReader;
			import org.apache.avro.io.DatumWriter;
			import org.apache.avro.specific.SpecificDatumReader;
			import org.apache.avro.specific.SpecificDatumWriter;
			import org.junit.Test;
			import tutorialspoint.com.Emp;

			import java.io.File;
			import java.io.IOException;

			/**
			 *
			 */
			public class TestAvro {
				/**
				 * 测试串行化
				 */
				@Test
				public void testAvroSeriaCompile() throws IOException {
					Emp e1 = new Emp();
					e1.setId(1);
					e1.setName("tom");
					e1.setAge(20);
					e1.setAddress("hebei");
					e1.setSalary(9000);

					//数据写入器
					DatumWriter<Emp> w = new SpecificDatumWriter<Emp>(Emp.class);
					//文件书写器
					DataFileWriter<Emp> file = new DataFileWriter<Emp>(w);
					//创建输出的文件
					file.create(Emp.SCHEMA$, new File("d:/mr/avro/emp.avro"));
					file.append(e1);
					file.append(e1);
					file.append(e1);
					file.append(e1);
					file.close();
				}

				/**
				 * 不编译avsc文件，实现avro访问
				 */
				@Test
				public void testAvroSeriaNoCompile() throws IOException {
					//加载avsc文件，形成Schema对象
					Schema schema = new Schema.Parser().parse(new File("d:/mr/avro/emp.avsc"));

					//创建通用记录类,相当于Emp对象
					GenericRecord e1 = new GenericData.Record(schema);
					e1.put("id", 1);
					e1.put("name", "tom");
					e1.put("age", 20);
					e1.put("salary", 9000);
					e1.put("address", "hebei");

					//数据写入器
					DatumWriter<GenericRecord> w = new SpecificDatumWriter<GenericRecord>(schema);
					//文件书写器
					DataFileWriter<GenericRecord> file = new DataFileWriter<GenericRecord>(w);
					//创建输出的文件
					file.create(schema, new File("d:/mr/avro/emp2.avro"));
					file.append(e1);
					file.append(e1);
					file.append(e1);
					file.append(e1);
					file.close();
				}

				/**
				 * 测试反串行化
				 */
				@Test
				public void testAvroDeserCompile() throws IOException {
					//数据reader
					DatumReader<Emp> r = new SpecificDatumReader<Emp>(Emp.class);
					//file reader
					DataFileReader fr = new DataFileReader(new File("d:/mr/avro/emp.avro"), r);
					while (fr.hasNext()) {
						Emp e = (Emp) fr.next();
						System.out.println(e.getName());
					}
					fr.close();
				}

				/**
				 * 测试反串行化
				 */
				@Test
				public void testAvroDeserNoCompile() throws IOException {
					//加载avsc文件，形成Schema对象
					Schema schema = new Schema.Parser().parse(new File("d:/mr/avro/emp.avsc"));
					//通用数据reader
					DatumReader<GenericRecord> datumReader = new GenericDatumReader<GenericRecord>(schema);
					DataFileReader<GenericRecord> fr = new DataFileReader<GenericRecord>(new File("d:/mr/avro/emp2.avro"),
																											datumReader);
					while(fr.hasNext()){
						System.out.println(fr.next().get("name")) ;
					}
				}
			}

	3.性能评测
				对象个数	java					avro					pb
				-----------------------------------------------------------------
		serial|	1000000		|space:	26.7M			space: 14.3M			|space:	18.1m				
							|time : 4,256,707,037	time : 1,085,268,085	|time : 1,999,361,195
				-------------------------------------------
		deser |	1000000		|time : 7,359,635,849	time : 0,879,651,859

google protocal buffers
--------------------------
	1.数据串行化方案,google出品
		描述语言
		编译器
		库
	2.易于使用，高效，二进制编码
	3.08年公开
	4.跨语言
		官方	: java、 c++、 python
		非官方  : C, C#, Erlang, Perl, PHP, Ruby, etc

	
	5.下载安装
		protoc-2.5.0/protoc.exe
	
	6.使用过程
		1.设计
			略
		2.描述
			[d:/mr/avro/person.proto]
			package tutorial;
			option java_package = "com.example.tutorial";
			option java_outer_classname = "AddressBookProtos";
			message Person {
				required string name = 1;
				required int32 id = 2;
				optional string email = 3;
				enum PhoneType {
					MOBILE = 0;
					HOME = 1;
					WORK = 2;
				}
				message PhoneNumber {
					required string number = 1;
					optional PhoneType type = 2 [default = HOME];
				}
				repeated PhoneNumber phone = 4;
			}
			message AddressBook {
				repeated Person person = 1;
			}

		3.编译并生成源码
			cmd>cd d:/mr/avro
			cmd>protoc.exe --java_out=out person.proto

		4.导入源代码
			4.1)引入pb的依赖
				<dependency>
					<groupId>com.google.protobuf</groupId>
					<artifactId>protobuf-java</artifactId>
					<version>2.5.0</version>
				</dependency>
			4.2)编程
				/**
				 * 测试PB的串行
				 */
				@Test
				public void testPBSerial() throws Exception {
					AddressBookProtos.Person p = AddressBookProtos.Person.newBuilder().setId(1)
							.setName("tom")
							.addPhone(AddressBookProtos.Person.PhoneNumber.newBuilder().setNumber("8888").build())
							.build() ;
					p.writeTo(new FileOutputStream("d:/mr/avro/pb.dat"));
				}
				
				/**
				 * 测试PB的反串行
				 */
				@Test
				public void testPBDeser() throws Exception {
					FileInputStream fis = new FileInputStream("d:/mr/avro/pb.dat") ;
					AddressBookProtos.Person p = AddressBookProtos.Person.parseFrom(fis) ;
					System.out.println(p.getName());
				}
